// SPDX-License-Identifier: MIT

pragma solidity ^0.7.0;

import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";

// Improved by Checks-Effects-Interactions pattern

contract ReentrancyImprovedByCEIPattern {
    mapping(address => uint256) private _balances;

    function withdraw(uint256 amount) public {
        require(_balances[msg.sender] >= amount);
        _balances[msg.sender] -= amount;
        (bool success, ) = msg.sender.call{value: amount}(""); // solhint-disable-line avoid-low-level-calls
        require(success);
    }

    function deposit() public payable {
        _balances[msg.sender] += msg.value;
    }

    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }
}

// Improved by ReentrancyGuard.sol

contract ReentrancyImprovedByMutex is ReentrancyGuard {
    mapping(address => uint256) private _balances;

    function withdraw(uint256 amount) public nonReentrant {
        require(_balances[msg.sender] >= amount);
        (bool success, ) = msg.sender.call{value: amount}(""); // solhint-disable-line avoid-low-level-calls
        require(success);
        _balances[msg.sender] -= amount;
    }

    function deposit() public payable {
        _balances[msg.sender] += msg.value;
    }

    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }
}
