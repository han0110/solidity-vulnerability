// SPDX-License-Identifier: MIT
// Reference:
// 1. https://www.reddit.com/r/ethdev/comments/7x5rwr/tricked_by_a_honeypot_contract_or_beaten_by
// 2. https://etherscan.io/address/0x95d34980095380851902ccd9a1fb4c813c2cb639#code

pragma solidity ^0.7.0;

// EVIL!!! INSECURE!!! DO NOT USE!!!

contract ReentrancyOnlyOwner {
    Logger private _logger;
    mapping(address => uint256) private _balances;

    constructor(address logger) {
        _logger = Logger(logger);
    }

    function withdraw(uint256 amount) public {
        require(_balances[msg.sender] >= amount);
        (bool success, ) = msg.sender.call{value: amount}(""); // solhint-disable-line avoid-low-level-calls
        if (success) {
            _balances[msg.sender] -= amount;
            _logger.log(msg.sender, "withdraw", amount);
        }
    }

    function deposit() public payable {
        _balances[msg.sender] += msg.value;
        _logger.log(msg.sender, "deposit", msg.value);
    }

    function balanceOf(address owner) public view returns (uint256) {
        return _balances[owner];
    }
}

// Logger is submitted with ReentrancyOnlyOwner to etherscan.io to
// pretend to be the real logger.
contract Logger {
    event Log(address, string, uint256);

    function log(
        address sender,
        string calldata action,
        uint256 value
    ) public {
        emit Log(sender, action, value);
    }
}

// LoggerEvil is deployed first and not verified but used as real logger.
contract LoggerEvil {
    address private _owner;

    event Log(address, string, uint256);

    constructor() {
        _owner = msg.sender;
    }

    function log(
        address sender,
        string calldata action,
        uint256 value
    ) public {
        require(
            tx.origin == _owner || // solhint-disable-line avoid-tx-origin
                keccak256(abi.encodePacked(action)) != keccak256("withdraw")
        );
        emit Log(sender, action, value);
    }
}
